[{"/home/assifvora/Documents/ReactJs/asif-ui-lib/src/reportWebVitals.js":"1","/home/assifvora/Documents/ReactJs/asif-ui-lib/src/index.js":"2","/home/assifvora/Documents/ReactJs/asif-ui-lib/src/components/DataTable/DataTable.js":"3","/home/assifvora/Documents/ReactJs/asif-ui-lib/src/main.js":"4","/home/assifvora/Documents/ReactJs/asif-ui-lib/src/components/DataTable/Styled.js":"5","/home/assifvora/Documents/ReactJs/asif-ui-lib/src/utils/helpers.js":"6","/home/assifvora/Documents/ReactJs/asif-ui-lib/src/components/DataTable/index.js":"7"},{"size":362,"mtime":1608890545711,"results":"8","hashOfConfig":"9"},{"size":828,"mtime":1608894905571,"results":"10","hashOfConfig":"9"},{"size":5261,"mtime":1608897176518,"results":"11","hashOfConfig":"9"},{"size":72,"mtime":1608891842452,"results":"12","hashOfConfig":"9"},{"size":1630,"mtime":1608894386693,"results":"13","hashOfConfig":"9"},{"size":863,"mtime":1608891471546,"results":"14","hashOfConfig":"9"},{"size":68,"mtime":1608891649061,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ff5eli",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/assifvora/Documents/ReactJs/asif-ui-lib/src/reportWebVitals.js",[],["32","33"],"/home/assifvora/Documents/ReactJs/asif-ui-lib/src/index.js",[],"/home/assifvora/Documents/ReactJs/asif-ui-lib/src/components/DataTable/DataTable.js",["34","35"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSVLink } from \"react-csv\";\nimport ReactPaginate from \"react-paginate\";\nimport {\n  getFilteredDataSource,\n  paginatedDataSource,\n  pageCount,\n} from \"../../utils/helpers\";\nimport {\n  ButtonContainer,\n  PaginateContainer,\n  Table,\n  Heading,\n  Row,\n  Th,\n  Title,\n  Td,\n  NoDataTd,\n  DropdownContainers,\n  Search,\n  Select,\n} from \"./Styled\";\nimport \"./DataTable.css\";\n\nconst pageNumbers = [1, 5, 10, 20, 30, 40, 50, 100];\n\nexport const DataTable = React.memo((props) => {\n  const { isLoading, columns, tableData, perPageData } = props;\n  const [data, setData] = useState([]);\n  const [filterByFields, setFilterByFields] = useState([]);\n  const [search, setSearch] = useState(null);\n  const [recordPerPage, setRecordPerPage] = useState(5);\n  const [selectedPage, setSelectedPage] = useState(1);\n  const [maximumDisplayedPages, setMaximumDisplayedPages] = useState(1);\n\n  const csvData = {\n    headers: columns,\n    data: data,\n    filename: \"data.csv\",\n  };\n\n  useEffect(() => {\n    setRecordPerPage(perPageData);\n  }, [perPageData]);\n\n  useEffect(() => {\n    const filterByFields = columns?.map((item) => item.key);\n    setFilterByFields(filterByFields);\n  }, [columns]);\n\n  useEffect(() => {\n    const maxPages = pageCount(tableData, recordPerPage);\n    const newPage = selectedPage > maxPages ? 1 : selectedPage;\n    const newPageData = paginatedDataSource(newPage, recordPerPage, tableData);\n    setSelectedPage(newPage);\n    setMaximumDisplayedPages(maxPages);\n    setData(newPageData);\n  }, [tableData]);\n\n  useEffect(() => {\n    const filteredData = getFilteredDataSource(\n      search,\n      filterByFields,\n      tableData\n    );\n    const newPageData = paginatedDataSource(1, recordPerPage, filteredData);\n    const maxPages = pageCount(filteredData, recordPerPage);\n    setMaximumDisplayedPages(maxPages);\n    setData(newPageData);\n    setSelectedPage(1);\n  }, [search]);\n\n  const onPageSizeChange = (pageSize) => {\n    const filteredData = getFilteredDataSource(\n      search,\n      filterByFields,\n      tableData\n    );\n    const newPageData = paginatedDataSource(1, pageSize, filteredData);\n    const maxPages = pageCount(filteredData, pageSize);\n    setData(newPageData);\n    setSelectedPage(1);\n    setRecordPerPage(pageSize);\n    setMaximumDisplayedPages(maxPages);\n  };\n\n  const handleOnPaginationChange = ({ selected }) => {\n    const selectPage = selected + 1;\n    const filteredData = getFilteredDataSource(\n      search,\n      filterByFields,\n      tableData\n    );\n    const newPageData = paginatedDataSource(\n      selectPage,\n      recordPerPage,\n      filteredData\n    );\n    setSelectedPage(selectPage);\n    setData(newPageData);\n  };\n\n  return (\n    <Fragment>\n      <DropdownContainers className=\"product-filter-wrapper\">\n        <div className=\"asif-lib-report-filter\">\n          <Search\n            placeholder=\"Search...\"\n            list=\"sku\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <div className=\"asif-lib-report-filter\">\n          <Select onChange={(e) => onPageSizeChange(Number(e.target.value))}>\n            {pageNumbers.map((page) => (\n              <option value={page} selected={page === recordPerPage}>\n                {page}\n              </option>\n            ))}\n          </Select>\n        </div>\n        <ButtonContainer>\n          <CSVLink className=\"btn-export-to-csv-data-asif-lib\" {...csvData}>\n            Export to CSV\n          </CSVLink>\n        </ButtonContainer>\n      </DropdownContainers>\n      <Table>\n        <Heading>\n          {columns?.map((column) => (\n            <Th key={column.key}>\n              <Title>{column.label}</Title>\n            </Th>\n          ))}\n        </Heading>\n        {data.length > 0 ? (\n          data.map((item, index) => {\n            return (\n              <Row key={index}>\n                {columns?.map((column) => (\n                  <Td key={index}>{item[column.key]}</Td>\n                ))}\n              </Row>\n            );\n          })\n        ) : (\n          <Row>\n            <NoDataTd colSpan={columns?.length}>\n              {isLoading ? \"Loading...\" : `No data available`}\n            </NoDataTd>\n          </Row>\n        )}\n      </Table>\n      <PaginateContainer>\n        <div id=\"react-paginate\">\n          <ReactPaginate\n            forcePage={selectedPage - 1}\n            previousLabel={\"Previous\"}\n            nextLabel={\"Next\"}\n            breakLabel={\"...\"}\n            breakClassName={\"break-me\"}\n            pageCount={maximumDisplayedPages}\n            marginPagesDisplayed={1}\n            pageRangeDisplayed={4}\n            onPageChange={handleOnPaginationChange}\n            containerClassName={\"pagination\"}\n            subContainerClassName={\"pages pagination\"}\n            activeClassName={\"active\"}\n          />\n        </div>\n      </PaginateContainer>\n    </Fragment>\n  );\n});\n\nDataTable.propTypes = {\n  isLoading: PropTypes.bool,\n  columns: PropTypes.array.isRequired,\n  tableData: PropTypes.array.isRequired,\n  perPageData: PropTypes.number\n};\n\nDataTable.defaultProps = {\n  isLoading: false,\n  columns: [],\n  tableData: [],\n  perPageData:10\n};\n","/home/assifvora/Documents/ReactJs/asif-ui-lib/src/main.js",[],"/home/assifvora/Documents/ReactJs/asif-ui-lib/src/components/DataTable/Styled.js",[],"/home/assifvora/Documents/ReactJs/asif-ui-lib/src/utils/helpers.js",[],"/home/assifvora/Documents/ReactJs/asif-ui-lib/src/components/DataTable/index.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":59,"column":6,"nodeType":"42","endLine":59,"endColumn":17,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"44","line":72,"column":6,"nodeType":"42","endLine":72,"endColumn":14,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'recordPerPage' and 'selectedPage'. Either include them or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has missing dependencies: 'filterByFields', 'recordPerPage', and 'tableData'. Either include them or remove the dependency array.",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},"Update the dependencies array to be: [recordPerPage, selectedPage, tableData]",{"range":"54","text":"55"},"Update the dependencies array to be: [filterByFields, recordPerPage, search, tableData]",{"range":"56","text":"57"},[1603,1614],"[recordPerPage, selectedPage, tableData]",[1978,1986],"[filterByFields, recordPerPage, search, tableData]"]